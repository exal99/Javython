Program ::= Decl*;

abstract Decl;

FunctionDecl : Decl ::= Name:TypedIdDecl Arg:TypedIdDecl* Block;
ClassDecl : Decl ::= IdDecl Decl*;
VarDecl : Decl ::= TypedIdDecl [Expression];

TypedIdDecl ::= Type IdDecl;

IdDecl ::= <ID:String>;
IdUse ::= <ID:String>;

Block ::= Statement*;

abstract Statement;

AssignStatement : Statement ::= IdUse Expression;
VarDeclStatement : Statement ::= VarDecl;
ReturnStatement : Statement ::= Expression;
WhileStatement : Statement ::= Expression Block;
IfStatement : Statement ::= Expression IfBlock:Block [ElseBlock:Block];
FunctionCallStatement : Statement ::= FunctionCall;
FunctionDeclStatement : Statement ::= FunctionDecl;
ClassDeclStatement : Statement ::= ClassDecl;
MethodCallStatement : Statement ::= MethodCall;


abstract Expression;

abstract BinaryOperator : Expression ::= Left:Expression Right:Expression;
abstract UnaryOperator : Expression ::= Expression;

AndExpression : BinaryOperator;
OrExpression : BinaryOperator;
XorExpression : BinaryOperator;
EqExpression : BinaryOperator;
NeqExpression : BinaryOperator;
LtExpression : BinaryOperator;
GtExpression : BinaryOperator;
GtEqExpression : BinaryOperator;
LtEqExpression : BinaryOperator;
PlusExpression : BinaryOperator;
MinusExpression : BinaryOperator;
TimesExpression : BinaryOperator;
DivExpression : BinaryOperator;
ModExpression : BinaryOperator;

IdExpression : Expression ::= <ID:String>;
IntegerExpression : Expression ::= <INTEGER:String>;
FloatExpression : Expression ::= <FLOAT:String>;
TrueExpression : Expression;
FalseExpression : Expression;
ThisExpression : Expression;
StringExpression : Expression ::= <STRING:String>;

NegateExpression : UnaryOperator;
ParenExpression : UnaryOperator;
NotExpression : UnaryOperator;

FunctionCallExpression : Expression ::= FunctionCall;
MethodCallExpression : Expression ::= MethodCall;
NewClassExpression : Expression ::= <ID:String> Expression*;

FunctionCall ::= <ID:String> Expression*;
MethodCall ::= ClassExpression:Expression <ID:String> Args:Expression*;

abstract Type;

IntType : Type;
FloatType : Type;
BoolType : Type;
IdType : Type ::= <ID:String>;
