%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error at line " + (token.getLine(token.getStart()) + 1) + " column " + token.getColumn(token.getStart()));
	}
:};

%terminals INTTYPE, BOOLTYPE, FLOATTYPE;
%terminals CLASS, RETURN, THIS, IF, ELSE, WHILE, NEW;

%terminals PLUS, MINUS, STAR, SLASH, MOD, ASSIGN, NOT;
%terminals EQ, NEQ, LT, GT, LTEQ, GTEQ, AND, OR, XOR;

%terminals STRING, ID, INTEGER, FLOAT, TRUE, FALSE;

%terminals LPAREN, RPAREN, LBRACE, RBRACE, COMMA, SEMICOLON, DOT;


%typeof program = "Program";
%typeof defenitionList = "List";
%typeof functionDecl = "FunctionDecl";
%typeof classDecl = "ClassDecl";
%typeof varDecl = "VarDecl";
%typeof block = "Block";
%typeof statementList = "List";
%typeof type = "Type";
%typeof typeDecl = "VarDecl";
%typeof declAndAssign = "VarDecl";
%typeof optArgList = "List";
%typeof argList = "List";
%typeof statement = "Statement";
%typeof assign = "AssignStatement";
%typeof return = "ReturnStatement";
%typeof while = "WhileStatement";
%typeof if = "IfStatement";
%typeof functionCallStmt = "FunctionCallStatement";
%typeof expretion = "Expression";
%typeof compExpr = "Expression";
%typeof arithmeticExpr = "Expression";
%typeof termExpr = "Expression";
%typeof factorExpr = "Expression";
%typeof newClass = "NewClassExpression";
%typeof functionCall = "FunctionCall";
%typeof optExprList = "List";
%typeof exprList = "List";
%typeof ifStart = "IfStatement";
%typeof methodCall = "MethodCall";
%typeof methodCallStatement = "MethodCallStatement";
%typeof methodCallExpression = "MethodCallExpression";


%goal program;

program = defenitionList.defList {: return new Program(defList); :};

defenitionList =  /* epsilon */ {: return new List(); :}
				| defenitionList.defList functionDecl.fd {: return defList.add(fd); :}
				| defenitionList.defList classDecl.cd {: return defList.add(cd); :}
				| defenitionList.defList varDecl.vd SEMICOLON {: return defList.add(vd); :};

block = LBRACE statementList.l RBRACE {: return new Block(l);:};

varDecl = typeDecl | declAndAssign;

functionDecl = type.t ID.id LPAREN optArgList.args RPAREN block.b
	{: return new FunctionDecl(new TypedIdDecl(t, new IdDecl(id)), args, b); :};

optArgList = /* epsilon */ {: return new List(); :}
		   | argList; 

argList = type.t ID.id {: return new List(new TypedIdDecl(t, new IdDecl(id))); :}
		| argList.l COMMA type.t ID.id {: return l.add(new TypedIdDecl(t, new IdDecl(id))); :};

statementList =   /* epsilon */ {: return new List(); :}
				| statementList.l statement.s SEMICOLON {: return l.add(s); :};

statement =   assign
			| varDecl.v {: return new VarDeclStatement(v); :}
			| return
			| while
			| if
			| methodCall.mc {: return new MethodCallStatement(mc); :}
			| functionCallStmt
			| functionDecl.fd {: return new FunctionDeclStatement(fd); :}
			| classDecl.cd {: return new ClassDeclStatement(cd); :};

assign = ID.id ASSIGN expretion.e {: return new AssignStatement(new IdUse(id), e); :};
declAndAssign = type.t ID.id ASSIGN expretion.e {: return new VarDecl(new TypedIdDecl(t, new IdDecl(id)), new Opt(e)); :};
typeDecl = type.t ID.id {: return new VarDecl(new TypedIdDecl(t, new IdDecl(id)), new Opt()); :};
return = RETURN expretion.e {: return new ReturnStatement(e); :};
while = WHILE LPAREN expretion.e RPAREN block.b {: return new WhileStatement(e, b); :} ;

if =  ifStart 
	| ifStart.s ELSE block.b {: return new IfStatement(s.getExpression(), s.getIfBlock(), new Opt(b)); :};
ifStart = IF LPAREN expretion.e RPAREN block.b {: return new IfStatement(e, b, new Opt()); :};

functionCallStmt = functionCall.fc {: return new FunctionCallStatement(fc); :};

expretion = expretion.e1 AND compExpr.e2 {: return new AndExpression(e1, e2); :}
		  | expretion.e1 OR  compExpr.e2 {: return new OrExpression(e1, e2); :}
		  | expretion.e1 XOR compExpr.e2 {: return new XorExpression(e1, e2); :}
		  | compExpr;

compExpr = compExpr.e1 EQ arithmeticExpr.e2 {: return new EqExpression(e1, e2); :}
		 | compExpr.e1 NEQ arithmeticExpr.e2 {: return new NeqExpression(e1, e2); :}
		 | compExpr.e1 LT arithmeticExpr.e2 {: return new LtExpression(e1, e2); :}
		 | compExpr.e1 GT arithmeticExpr.e2 {: return new GtExpression(e1, e2); :}
		 | compExpr.e1 GTEQ arithmeticExpr.e2 {: return new GtEqExpression(e1, e2); :}
		 | compExpr.e1 LTEQ arithmeticExpr.e2 {: return new LtEqExpression(e1, e2); :}
		 | arithmeticExpr;

arithmeticExpr = arithmeticExpr.e1 PLUS termExpr.e2 {: return new PlusExpression(e1, e2); :}
			   | arithmeticExpr.e1 MINUS termExpr.e2 {: return new MinusExpression(e1, e2); :}
			   | termExpr;

termExpr = termExpr.e1 STAR factorExpr.e2 {: return new TimesExpression(e1, e2); :}
		 | termExpr.e1 SLASH factorExpr.e2 {: return new DivExpression(e1, e2); :}
		 | termExpr.e1 MOD factorExpr.e2 {: return new ModExpression(e1, e2); :}
		 | NOT factorExpr.e {: return new NotExpression(e); :}
		 | MINUS factorExpr.e {: return new NegateExpression(e); :}
		 | factorExpr;

factorExpr = ID.id {: return new IdExpression(id); :}
		   | INTEGER.i {: return new IntegerExpression(i); :}
		   | FLOAT.f {: return new FloatExpression(f); :}
		   | STRING.s {: return new StringExpression(s); :}
		   | LPAREN expretion.e RPAREN {: return new ParenExpression(e); :}
		   | TRUE {: return new TrueExpression(); :}
		   | FALSE {: return new FalseExpression(); :}
		   | THIS {: return new ThisExpression(); :}
		   | newClass
		   | methodCall.mc {: return new MethodCallExpression(mc); :}
		   | functionCall;


methodCall = factorExpr.classExp DOT ID.id LPAREN optExprList.args RPAREN {: return new MethodCall(classExp, id, args); :};
newClass = NEW ID.id LPAREN optExprList.args RPAREN {: return new NewClassExpression(id, args); :};
functionCall = ID.id LPAREN optExprList.args RPAREN {: return new FunctionCallExpression(new FunctionCall(id, args)); :};



optExprList = /* epsilon */ {: return new List(); :}
			| exprList;

exprList = expretion.e {: return new List(e); :}
		|  exprList.l COMMA expretion.e {: return l.add(e); :};


classDecl = CLASS ID.id LBRACE defenitionList.defs RBRACE {: return new ClassDecl(new IdDecl(id), defs); :};

type = INTTYPE {: return new IntType();:}
	|  FLOATTYPE {: return new FloatType(); :}
	|  BOOLTYPE {: return new BoolType(); :}
	|  ID.id {: return new IdType(id); :};